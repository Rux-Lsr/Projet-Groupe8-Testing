openapi: 3.0.0
info:
  title: API Utilisateurs Propelize
  version: 1.0.0
  description: |
    Gestion des utilisateurs et authentification JWT.
    **Permissions requises :**
    - Routes protégées nécessitent un token valide
    - Seuls les admins peuvent modifier d'autres utilisateurs

paths:
  /users/register:
    post:
      tags: [Authentification]
      summary: Enregistrement d'un nouvel utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '201':
          description: Utilisateur créé avec tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: |
            Erreurs possibles :
            - Email déjà utilisé
            - Données manquantes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/login:
    post:
      tags: [Authentification]
      summary: Connexion utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Connexion réussie
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Identifiants invalides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/refresh-token:
    post:
      tags: [Authentification]
      summary: Rafraîchir le token d'accès
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
              required: [refreshToken]
      responses:
        '200':
          description: Nouveau token généré
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
        '401':
          description: Refresh token invalide ou expiré

  /users/{id}:
    put:
      tags: [Utilisateurs]
      summary: Mettre à jour un utilisateur
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: Utilisateur mis à jour
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '403':
          description: |
            Interdit :
            - Tentative de modification d'un autre utilisateur sans droits admin
        '404':
          description: Utilisateur non trouvé

  /users/profile:
    get:
      tags: [Utilisateurs]
      summary: Récupérer le profil courant
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Profil utilisateur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Non authentifié

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    UserId:
      name: id
      in: path
      required: true
      schema:
        type: integer
        example: 1
      description: ID utilisateur

  schemas:
    UserRegister:
      type: object
      required: [name, email, password]
      properties:
        name:
          type: string
          example: "John Doe"
          minLength: 3
        email:
          type: string
          format: email
          example: "user@propelize.com"
        password:
          type: string
          format: password
          example: "securePassword123"
          minLength: 6

    UserLogin:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          example: "admin@propelize.com"
        password:
          type: string
          example: "admin123"

    UserUpdate:
      type: object
      properties:
        name:
          type: string
          example: "Nouveau Nom"
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: Token valable 15 minutes
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refreshToken:
          type: string
          description: Token valable 7 jours
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          $ref: '#/components/schemas/UserProfile'

    UserProfile:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [user, admin]

    Error:
      type: object
      properties:
        error:
          type: string
          example: "Email already exists"
        details:
          type: string
          example: "Validation error"