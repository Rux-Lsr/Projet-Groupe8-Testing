openapi: 3.0.0
info:
  title: API de Gestion des Utilisateurs et Véhicules
  version: 1.0.0
  description: Documentation de l'API pour la gestion des utilisateurs et véhicules

servers:
  - url: http://localhost:3000/api
    description: Serveur de développement

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "John Doe"
        password:
          type: string
          example: "password123"
    
    Vehicle:
      type: object
      properties:
        id:
          type: integer
          example: 1
        registrationNumber:
          type: string
          example: "ABC-123"
        price:
          type: number
          example: 25000.50

    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string

paths:
  /users/register:
    post:
      tags:
        - Utilisateurs
      summary: Enregistrement d'un nouvel utilisateur
      description: Crée un nouveau compte utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - password
              properties:
                name:
                  type: string
                  example: "John Doe"
                password:
                  type: string
                  example: "password123"
      responses:
        '201':
          description: Utilisateur créé avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: "John Doe"
                  accessToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  refreshToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '400':
          description: Erreur de validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/login:
    post:
      tags:
        - Utilisateurs
      summary: Connexion utilisateur
      description: Authentifie un utilisateur et retourne les tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - password
              properties:
                name:
                  type: string
                  example: "John Doe"
                password:
                  type: string
                  example: "password123"
      responses:
        '200':
          description: Connexion réussie
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: "John Doe"
                  accessToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  refreshToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '401':
          description: Identifiants invalides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/refresh-token:
    post:
      tags:
        - Utilisateurs
      summary: Rafraîchir le token d'accès
      description: Génère un nouveau token d'accès à partir du refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: Token rafraîchi avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  accessToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '401':
          description: Refresh token invalide
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Invalid refresh token"

  /users/{id}:
    put:
      tags:
        - Utilisateurs
      summary: Mettre à jour un utilisateur
      description: Met à jour les informations d'un utilisateur
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID de l'utilisateur à mettre à jour
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "John Doe Updated"
                password:
                  type: string
                  example: "newpassword123"
      responses:
        '200':
          description: Utilisateur mis à jour avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '404':
          description: Utilisateur non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Utilisateurs
      summary: Supprimer un utilisateur
      description: Supprime un utilisateur par son ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID de l'utilisateur à supprimer
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Utilisateur supprimé avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Utilisateur supprimé avec succès"
                  deletedUser:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: "John Doe"
        '404':
          description: Utilisateur non trouvé
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Utilisateur non trouvé"
        '400':
          description: Impossible de supprimer l'administrateur
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Impossible de supprimer l'administrateur"
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Erreur lors de la suppression"
                  error:
                    type: string
                    example: "Database connection failed"

  /vehicles:
    post:
      tags:
        - Véhicules
      summary: Créer un nouveau véhicule
      description: Ajoute un nouveau véhicule à la base de données
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - registrationNumber
                - price
              properties:
                registrationNumber:
                  type: string
                  example: "ABC-123"
                price:
                  type: number
                  example: 25000.50
      responses:
        '201':
          description: Véhicule créé avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        '400':
          description: Erreur de validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      tags:
        - Véhicules
      summary: Lister tous les véhicules
      description: Récupère la liste de tous les véhicules
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Liste des véhicules
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vehicle'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /vehicles/{id}:
    get:
      tags:
        - Véhicules
      summary: Obtenir un véhicule par ID
      description: Récupère un véhicule spécifique par son ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID du véhicule
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Véhicule trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        '404':
          description: Véhicule non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Véhicules
      summary: Mettre à jour un véhicule
      description: Met à jour les informations d'un véhicule
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID du véhicule à mettre à jour
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                registrationNumber:
                  type: string
                  example: "XYZ-789"
                price:
                  type: number
                  example: 30000.75
      responses:
        '200':
          description: Véhicule mis à jour avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        '404':
          description: Véhicule non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Véhicules
      summary: Supprimer un véhicule
      description: Supprime un véhicule par son ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID du véhicule à supprimer
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Véhicule supprimé avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Véhicule supprimé avec succès"
        '404':
          description: Véhicule non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /vehicles/search/{registrationNumber}:
    get:
      tags:
        - Véhicules
      summary: Rechercher un véhicule par immatriculation
      description: Trouve un véhicule par son numéro d'immatriculation
      security:
        - bearerAuth: []
      parameters:
        - name: registrationNumber
          in: path
          required: true
          description: Numéro d'immatriculation du véhicule
          schema:
            type: string
            example: "ABC-123"
      responses:
        '200':
          description: Véhicule trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        '404':
          description: Véhicule non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /vehicles/price/{maxPrice}:
    get:
      tags:
        - Véhicules
      summary: Filtrer les véhicules par prix maximum
      description: Récupère tous les véhicules avec un prix inférieur ou égal au prix spécifié
      security:
        - bearerAuth: []
      parameters:
        - name: maxPrice
          in: path
          required: true
          description: Prix maximum pour filtrer les véhicules
          schema:
            type: number
            example: 30000
      responses:
        '200':
          description: Liste des véhicules filtrés
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vehicle'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'